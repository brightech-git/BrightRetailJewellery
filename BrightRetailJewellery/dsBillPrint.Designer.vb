'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsBillPrint"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsBillPrint
    Inherits Global.System.Data.DataSet
    
    Private tabledtSales As dtSalesDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtSales")) Is Nothing) Then
                MyBase.Tables.Add(New dtSalesDataTable(ds.Tables("dtSales")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtSales() As dtSalesDataTable
        Get
            Return Me.tabledtSales
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsBillPrint = CType(MyBase.Clone,dsBillPrint)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtSales")) Is Nothing) Then
                MyBase.Tables.Add(New dtSalesDataTable(ds.Tables("dtSales")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtSales = CType(MyBase.Tables("dtSales"),dtSalesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtSales) Is Nothing) Then
                Me.tabledtSales.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsBillPrint"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBillPrint.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtSales = New dtSalesDataTable
        MyBase.Tables.Add(Me.tabledtSales)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtSales() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsBillPrint = New dsBillPrint
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtSalesRowChangeEventHandler(ByVal sender As Object, ByVal e As dtSalesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtSalesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSRNO As Global.System.Data.DataColumn
        
        Private columnTRANNO As Global.System.Data.DataColumn
        
        Private columnBILLDATE As Global.System.Data.DataColumn
        
        Private columnBATCHNO_N As Global.System.Data.DataColumn
        
        Private columnITEMNAME As Global.System.Data.DataColumn
        
        Private columnQTY As Global.System.Data.DataColumn
        
        Private columnGRSWT As Global.System.Data.DataColumn
        
        Private columnNETWT As Global.System.Data.DataColumn
        
        Private columnLESSWT As Global.System.Data.DataColumn
        
        Private columnWASTAGE As Global.System.Data.DataColumn
        
        Private columnRATE As Global.System.Data.DataColumn
        
        Private columnMCHARGE As Global.System.Data.DataColumn
        
        Private columnTAX As Global.System.Data.DataColumn
        
        Private columnAMOUNT As Global.System.Data.DataColumn
        
        Private columnSNO As Global.System.Data.DataColumn
        
        Private columnRESULT As Global.System.Data.DataColumn
        
        Private columnTYPE As Global.System.Data.DataColumn
        
        Private columnCOLHEAD As Global.System.Data.DataColumn
        
        Private columnISSNO As Global.System.Data.DataColumn
        
        Private columnPGNO As Global.System.Data.DataColumn
        
        Private columnPNAME As Global.System.Data.DataColumn
        
        Private columnADD1 As Global.System.Data.DataColumn
        
        Private columnADD2 As Global.System.Data.DataColumn
        
        Private columnADD3 As Global.System.Data.DataColumn
        
        Private columnMOBILE As Global.System.Data.DataColumn
        
        Private columnPINCODE As Global.System.Data.DataColumn
        
        Private columnAREA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtSales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SRNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSRNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRANNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BILLDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BATCHNO_NColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCHNO_N
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GRSWTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRSWT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NETWTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNETWT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LESSWTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLESSWT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WASTAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWASTAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCHARGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCHARGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESULTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESULT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COLHEADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOLHEAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ISSNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PGNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPGNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADD3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnADD3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOBILEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOBILE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PINCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPINCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtSalesRow
            Get
                Return CType(Me.Rows(index),dtSalesRow)
            End Get
        End Property
        
        Public Event dtSalesRowChanging As dtSalesRowChangeEventHandler
        
        Public Event dtSalesRowChanged As dtSalesRowChangeEventHandler
        
        Public Event dtSalesRowDeleting As dtSalesRowChangeEventHandler
        
        Public Event dtSalesRowDeleted As dtSalesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtSalesRow(ByVal row As dtSalesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtSalesRow( _
                    ByVal SRNO As String,  _
                    ByVal TRANNO As Double,  _
                    ByVal BILLDATE As String,  _
                    ByVal BATCHNO_N As String,  _
                    ByVal ITEMNAME As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal GRSWT As Double,  _
                    ByVal NETWT As String,  _
                    ByVal LESSWT As String,  _
                    ByVal WASTAGE As String,  _
                    ByVal RATE As String,  _
                    ByVal MCHARGE As String,  _
                    ByVal TAX As String,  _
                    ByVal AMOUNT As String,  _
                    ByVal SNO As String,  _
                    ByVal RESULT As String,  _
                    ByVal TYPE As String,  _
                    ByVal COLHEAD As String,  _
                    ByVal ISSNO As String,  _
                    ByVal PGNO As String,  _
                    ByVal PNAME As String,  _
                    ByVal ADD1 As String,  _
                    ByVal ADD2 As String,  _
                    ByVal ADD3 As String,  _
                    ByVal MOBILE As String,  _
                    ByVal PINCODE As String,  _
                    ByVal AREA As String) As dtSalesRow
            Dim rowdtSalesRow As dtSalesRow = CType(Me.NewRow,dtSalesRow)
            Dim columnValuesArray() As Object = New Object() {SRNO, TRANNO, BILLDATE, BATCHNO_N, ITEMNAME, QTY, GRSWT, NETWT, LESSWT, WASTAGE, RATE, MCHARGE, TAX, AMOUNT, SNO, RESULT, TYPE, COLHEAD, ISSNO, PGNO, PNAME, ADD1, ADD2, ADD3, MOBILE, PINCODE, AREA}
            rowdtSalesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtSalesRow)
            Return rowdtSalesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtSalesDataTable = CType(MyBase.Clone,dtSalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtSalesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSRNO = MyBase.Columns("SRNO")
            Me.columnTRANNO = MyBase.Columns("TRANNO")
            Me.columnBILLDATE = MyBase.Columns("BILLDATE")
            Me.columnBATCHNO_N = MyBase.Columns("BATCHNO_N")
            Me.columnITEMNAME = MyBase.Columns("ITEMNAME")
            Me.columnQTY = MyBase.Columns("QTY")
            Me.columnGRSWT = MyBase.Columns("GRSWT")
            Me.columnNETWT = MyBase.Columns("NETWT")
            Me.columnLESSWT = MyBase.Columns("LESSWT")
            Me.columnWASTAGE = MyBase.Columns("WASTAGE")
            Me.columnRATE = MyBase.Columns("RATE")
            Me.columnMCHARGE = MyBase.Columns("MCHARGE")
            Me.columnTAX = MyBase.Columns("TAX")
            Me.columnAMOUNT = MyBase.Columns("AMOUNT")
            Me.columnSNO = MyBase.Columns("SNO")
            Me.columnRESULT = MyBase.Columns("RESULT")
            Me.columnTYPE = MyBase.Columns("TYPE")
            Me.columnCOLHEAD = MyBase.Columns("COLHEAD")
            Me.columnISSNO = MyBase.Columns("ISSNO")
            Me.columnPGNO = MyBase.Columns("PGNO")
            Me.columnPNAME = MyBase.Columns("PNAME")
            Me.columnADD1 = MyBase.Columns("ADD1")
            Me.columnADD2 = MyBase.Columns("ADD2")
            Me.columnADD3 = MyBase.Columns("ADD3")
            Me.columnMOBILE = MyBase.Columns("MOBILE")
            Me.columnPINCODE = MyBase.Columns("PINCODE")
            Me.columnAREA = MyBase.Columns("AREA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSRNO = New Global.System.Data.DataColumn("SRNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSRNO)
            Me.columnTRANNO = New Global.System.Data.DataColumn("TRANNO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANNO)
            Me.columnBILLDATE = New Global.System.Data.DataColumn("BILLDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBILLDATE)
            Me.columnBATCHNO_N = New Global.System.Data.DataColumn("BATCHNO_N", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCHNO_N)
            Me.columnITEMNAME = New Global.System.Data.DataColumn("ITEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEMNAME)
            Me.columnQTY = New Global.System.Data.DataColumn("QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY)
            Me.columnGRSWT = New Global.System.Data.DataColumn("GRSWT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRSWT)
            Me.columnNETWT = New Global.System.Data.DataColumn("NETWT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNETWT)
            Me.columnLESSWT = New Global.System.Data.DataColumn("LESSWT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLESSWT)
            Me.columnWASTAGE = New Global.System.Data.DataColumn("WASTAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWASTAGE)
            Me.columnRATE = New Global.System.Data.DataColumn("RATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRATE)
            Me.columnMCHARGE = New Global.System.Data.DataColumn("MCHARGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCHARGE)
            Me.columnTAX = New Global.System.Data.DataColumn("TAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAX)
            Me.columnAMOUNT = New Global.System.Data.DataColumn("AMOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAMOUNT)
            Me.columnSNO = New Global.System.Data.DataColumn("SNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSNO)
            Me.columnRESULT = New Global.System.Data.DataColumn("RESULT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESULT)
            Me.columnTYPE = New Global.System.Data.DataColumn("TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYPE)
            Me.columnCOLHEAD = New Global.System.Data.DataColumn("COLHEAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOLHEAD)
            Me.columnISSNO = New Global.System.Data.DataColumn("ISSNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSNO)
            Me.columnPGNO = New Global.System.Data.DataColumn("PGNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPGNO)
            Me.columnPNAME = New Global.System.Data.DataColumn("PNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPNAME)
            Me.columnADD1 = New Global.System.Data.DataColumn("ADD1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD1)
            Me.columnADD2 = New Global.System.Data.DataColumn("ADD2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD2)
            Me.columnADD3 = New Global.System.Data.DataColumn("ADD3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADD3)
            Me.columnMOBILE = New Global.System.Data.DataColumn("MOBILE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOBILE)
            Me.columnPINCODE = New Global.System.Data.DataColumn("PINCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPINCODE)
            Me.columnAREA = New Global.System.Data.DataColumn("AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtSalesRow() As dtSalesRow
            Return CType(Me.NewRow,dtSalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtSalesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtSalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtSalesRowChangedEvent) Is Nothing) Then
                RaiseEvent dtSalesRowChanged(Me, New dtSalesRowChangeEvent(CType(e.Row,dtSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtSalesRowChangingEvent) Is Nothing) Then
                RaiseEvent dtSalesRowChanging(Me, New dtSalesRowChangeEvent(CType(e.Row,dtSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtSalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtSalesRowDeleted(Me, New dtSalesRowChangeEvent(CType(e.Row,dtSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtSalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtSalesRowDeleting(Me, New dtSalesRowChangeEvent(CType(e.Row,dtSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtSalesRow(ByVal row As dtSalesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsBillPrint = New dsBillPrint
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtSalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtSalesRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtSales As dtSalesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtSales = CType(Me.Table,dtSalesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SRNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.SRNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SRNO' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.SRNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRANNO() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.TRANNOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANNO' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.TRANNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BILLDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.BILLDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BILLDATE' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.BILLDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BATCHNO_N() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.BATCHNO_NColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCHNO_N' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.BATCHNO_NColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEMNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.ITEMNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEMNAME' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.ITEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTY' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GRSWT() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.GRSWTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRSWT' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.GRSWTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NETWT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.NETWTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NETWT' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.NETWTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LESSWT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.LESSWTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LESSWT' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.LESSWTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WASTAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.WASTAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WASTAGE' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.WASTAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RATE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.RATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RATE' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCHARGE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.MCHARGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MCHARGE' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.MCHARGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAX() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.TAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TAX' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.TAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AMOUNT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.AMOUNTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AMOUNT' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.SNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SNO' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.SNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESULT() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.RESULTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESULT' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.RESULTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TYPE' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COLHEAD() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.COLHEADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COLHEAD' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.COLHEADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ISSNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.ISSNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISSNO' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.ISSNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PGNO() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.PGNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PGNO' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.PGNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.PNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PNAME' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.PNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.ADD1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD1' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.ADD1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD2() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.ADD2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD2' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.ADD2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADD3() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.ADD3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADD3' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.ADD3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOBILE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.MOBILEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MOBILE' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.MOBILEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PINCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.PINCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PINCODE' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.PINCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtSales.AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AREA' in table 'dtSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtSales.AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSRNONull() As Boolean
            Return Me.IsNull(Me.tabledtSales.SRNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSRNONull()
            Me(Me.tabledtSales.SRNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTRANNONull() As Boolean
            Return Me.IsNull(Me.tabledtSales.TRANNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTRANNONull()
            Me(Me.tabledtSales.TRANNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.BILLDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBILLDATENull()
            Me(Me.tabledtSales.BILLDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBATCHNO_NNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.BATCHNO_NColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBATCHNO_NNull()
            Me(Me.tabledtSales.BATCHNO_NColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.ITEMNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEMNAMENull()
            Me(Me.tabledtSales.ITEMNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTYNull()
            Me(Me.tabledtSales.QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGRSWTNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.GRSWTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGRSWTNull()
            Me(Me.tabledtSales.GRSWTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNETWTNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.NETWTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNETWTNull()
            Me(Me.tabledtSales.NETWTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLESSWTNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.LESSWTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLESSWTNull()
            Me(Me.tabledtSales.LESSWTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWASTAGENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.WASTAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWASTAGENull()
            Me(Me.tabledtSales.WASTAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.RATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRATENull()
            Me(Me.tabledtSales.RATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMCHARGENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.MCHARGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMCHARGENull()
            Me(Me.tabledtSales.MCHARGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAXNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.TAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAXNull()
            Me(Me.tabledtSales.TAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAMOUNTNull()
            Me(Me.tabledtSales.AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSNONull() As Boolean
            Return Me.IsNull(Me.tabledtSales.SNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSNONull()
            Me(Me.tabledtSales.SNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESULTNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.RESULTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESULTNull()
            Me(Me.tabledtSales.RESULTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTYPENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTYPENull()
            Me(Me.tabledtSales.TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOLHEADNull() As Boolean
            Return Me.IsNull(Me.tabledtSales.COLHEADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOLHEADNull()
            Me(Me.tabledtSales.COLHEADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsISSNONull() As Boolean
            Return Me.IsNull(Me.tabledtSales.ISSNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetISSNONull()
            Me(Me.tabledtSales.ISSNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPGNONull() As Boolean
            Return Me.IsNull(Me.tabledtSales.PGNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPGNONull()
            Me(Me.tabledtSales.PGNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPNAMENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.PNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPNAMENull()
            Me(Me.tabledtSales.PNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD1Null() As Boolean
            Return Me.IsNull(Me.tabledtSales.ADD1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD1Null()
            Me(Me.tabledtSales.ADD1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD2Null() As Boolean
            Return Me.IsNull(Me.tabledtSales.ADD2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD2Null()
            Me(Me.tabledtSales.ADD2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADD3Null() As Boolean
            Return Me.IsNull(Me.tabledtSales.ADD3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADD3Null()
            Me(Me.tabledtSales.ADD3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOBILENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.MOBILEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOBILENull()
            Me(Me.tabledtSales.MOBILEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPINCODENull() As Boolean
            Return Me.IsNull(Me.tabledtSales.PINCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPINCODENull()
            Me(Me.tabledtSales.PINCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAREANull() As Boolean
            Return Me.IsNull(Me.tabledtSales.AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAREANull()
            Me(Me.tabledtSales.AREAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtSalesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtSalesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtSalesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtSalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
